{"ast":null,"code":"import _initializerDefineProperty from \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _temp;\n\nimport { observable, action, computed, configure, runInAction } from 'mobx';\nimport { createContext } from 'react';\nimport agent from '../api/agent';\nconfigure({\n  enforceActions: 'always'\n});\nlet ActivityStore = (_class = (_temp = class ActivityStore {\n  constructor() {\n    _initializerDefineProperty(this, \"activityRegistry\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"activities\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"activity\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"loadingInitial\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"submitting\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"target\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"loadActivities\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"loadActivity\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"clearActivity\", _descriptor9, this);\n\n    this.getActivity = id => {\n      return this.activityRegistry.get(id);\n    };\n\n    _initializerDefineProperty(this, \"createActivity\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"openCreateForm\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"selectActivity\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"editActivity\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"openEditForm\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"cancelSelectedActivity\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"cancelFormOpen\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"deleteActivity\", _descriptor17, this);\n  }\n\n  get activitiesByDate() {\n    return Array.from(this.activityRegistry.values()).sort((a, b) => Date.parse(a.date) - Date.parse(b.date));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"activityRegistry\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"activities\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"activity\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"loadingInitial\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"submitting\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"activitiesByDate\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"activitiesByDate\"), _class.prototype), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"loadActivities\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.loadingInitial = true;\n\n      try {\n        const activities = await agent.Activities.list();\n        runInAction('loading activities', () => {\n          activities.forEach(activity => {\n            activity.date = activity.date.split('.')[0];\n            this.activityRegistry.set(activity.id, activity);\n          });\n          this.loadingInitial = false;\n        });\n      } catch (error) {\n        runInAction('load activities error', () => {\n          this.loadingInitial = false; //7.084 - in the catch as well so that if we have a problem it'll stay in loading\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"loadActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async id => {\n      let activity = this.getActivity(id);\n\n      if (activity) {\n        this.activity = activity;\n      } else {\n        this.loadingInitial = true;\n\n        try {\n          activity = await agent.Activities.details(id);\n          runInAction('getting activity', () => {\n            this.activity = activity;\n            this.loadingInitial = false;\n          });\n        } catch (error) {\n          runInAction('get activity error', () => {\n            this.loadingInitial = false;\n          });\n          console.log(error);\n        }\n      }\n    };\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"clearActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.activity = null;\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"createActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.create(activity);\n        runInAction('creating activity', () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.editMode = false;\n          this.submitting = false;\n        });\n      } catch (error) {\n        runInAction('create activity error', () => {\n          this.submitting = false;\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"openCreateForm\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.editMode = true;\n      this.activity = null;\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"selectActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.activity = this.activityRegistry.get(id);\n      this.editMode = false;\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"editActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.update(activity);\n        runInAction('editing activity', () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.activity = activity;\n          this.editMode = false;\n          this.submitting = false;\n        });\n      } catch (error) {\n        runInAction('edit activity error', () => {\n          this.submitting = false;\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"openEditForm\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.activity = this.activityRegistry.get(id);\n      this.editMode = true;\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"cancelSelectedActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.activity = null;\n    };\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"cancelFormOpen\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.editMode = false;\n    };\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"deleteActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async (event, id) => {\n      this.submitting = true;\n      this.target = event.currentTarget.name;\n\n      try {\n        await agent.Activities.delete(id);\n        runInAction('deleting activity', () => {\n          this.activityRegistry.delete(id);\n          this.submitting = false;\n          this.target = '';\n        });\n      } catch (error) {\n        runInAction('delete activity error', () => {\n          this.submitting = false;\n          this.target = '';\n        });\n        console.log(error);\n      }\n    };\n  }\n})), _class);\nexport default createContext(new ActivityStore()); //7.081 - make sure to auto import from reactimport { IActivity } from './../models/activity';","map":{"version":3,"sources":["F:/OneDrive/_SoftwareDev/Udemy/2019_.NetCore_React/Projects/Reactivities_.NetCore2.2.3/client-app/src/app/stores/activityStore.ts"],"names":["observable","action","computed","configure","runInAction","createContext","agent","enforceActions","ActivityStore","getActivity","id","activityRegistry","get","activitiesByDate","Array","from","values","sort","a","b","Date","parse","date","Map","loadingInitial","activities","Activities","list","forEach","activity","split","set","error","console","log","details","submitting","create","editMode","update","event","target","currentTarget","name","delete"],"mappings":"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","sourcesContent":["import { observable, action, computed, configure, runInAction } from 'mobx';\r\nimport { createContext, SyntheticEvent } from 'react';\r\nimport { IActivity } from '../models/activity';\r\nimport agent from '../api/agent';\r\n\r\nconfigure({enforceActions: 'always'});\r\n\r\nclass ActivityStore {\r\n    @observable activityRegistry = new Map();\r\n    @observable activities: IActivity[] = [];\r\n    @observable activity: IActivity | null = null;\r\n    @observable loadingInitial = false;\r\n    @observable submitting = false;\r\n    @observable target = '';\r\n\r\n    @computed get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort(\r\n            (a, b) => Date.parse(a.date) - Date.parse(b.date)\r\n        );\r\n    }\r\n\r\n    @action loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n\r\n        try{\r\n            const activities = await agent.Activities.list();\r\n            runInAction('loading activities',() => {\r\n                activities.forEach((activity) => {\r\n                    activity.date = activity.date.split('.')[0];\r\n                    this.activityRegistry.set(activity.id, activity);\r\n                });\r\n                this.loadingInitial = false\r\n            });\r\n        } catch (error){\r\n            runInAction('load activities error', () => {\r\n                this.loadingInitial = false //7.084 - in the catch as well so that if we have a problem it'll stay in loading\r\n            });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    @action loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity){\r\n            this.activity = activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                runInAction('getting activity', () => {\r\n                    this.activity = activity;\r\n                    this.loadingInitial = false;\r\n                })\r\n            } catch (error) {\r\n                runInAction('get activity error', () => {\r\n                    this.loadingInitial = false;\r\n                })\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    @action clearActivity = () => {\r\n        this.activity = null;\r\n    }\r\n\r\n    getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    @action createActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        try{\r\n            await agent.Activities.create(activity);\r\n            runInAction('creating activity', () => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.editMode = false;\r\n                this.submitting = false;\r\n            });\r\n        }catch(error){\r\n            runInAction('create activity error', () => {\r\n                this.submitting = false;\r\n            })\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action openCreateForm = () => {\r\n        this.editMode = true;\r\n        this.activity = null;\r\n    }\r\n\r\n    @action selectActivity = (id: string) => {\r\n        this.activity = this.activityRegistry.get(id);\r\n        this.editMode = false;\r\n    }\r\n\r\n    @action editActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction('editing activity', () => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.activity = activity;\r\n                this.editMode = false;\r\n                this.submitting = false;\r\n            });\r\n        } catch (error) {\r\n            runInAction('edit activity error', () => {\r\n                this.submitting = false;\r\n            });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action openEditForm = (id: string) => {\r\n        this.activity = this.activityRegistry.get(id);\r\n        this.editMode = true;\r\n    }\r\n\r\n    @action cancelSelectedActivity = () => {\r\n        this.activity = null;\r\n    }\r\n\r\n    @action cancelFormOpen = () => {\r\n        this.editMode = false;\r\n    }\r\n\r\n    @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        this.target = event.currentTarget.name;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction('deleting activity', () => {\r\n                this.activityRegistry.delete(id);\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n        } catch (error) {\r\n            runInAction('delete activity error', () => {\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default createContext(new ActivityStore()) //7.081 - make sure to auto import from reactimport { IActivity } from './../models/activity';\r\n"]},"metadata":{},"sourceType":"module"}