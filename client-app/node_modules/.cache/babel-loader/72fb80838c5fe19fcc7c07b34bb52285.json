{"ast":null,"code":"import _defineProperty from \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\src\\\\features\\\\activities\\\\form\\\\ActivityForm.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Segment, Form, Button } from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\";\nimport ActivityStore from \"../../../app/stores/activityStore\";\nimport { observer } from \"mobx-react-lite\";\n\nconst ActivityForm = ({\n  match\n}) => {\n  const activityStore = useContext(ActivityStore);\n  const createActivity = activityStore.createActivity,\n        editActivity = activityStore.editActivity,\n        submitting = activityStore.submitting,\n        cancelFormOpen = activityStore.cancelFormOpen,\n        initialFormState = activityStore.activity;\n  useEffect(() => {\n    if (match.params.id) {\n      loadActivity(match.params.id);\n    }\n  });\n\n  const initializeForm = () => {\n    if (initialFormState) {\n      return initialFormState;\n    } else {\n      return {\n        id: \"\",\n        title: \"\",\n        category: \"\",\n        description: \"\",\n        date: \"\",\n        city: \"\",\n        venue: \"\"\n      };\n    }\n  };\n\n  const _useState = useState(initializeForm),\n        _useState2 = _slicedToArray(_useState, 2),\n        activity = _useState2[0],\n        setActivity = _useState2[1];\n\n  const handleSubmit = () => {\n    if (activity.id.length === 0) {\n      let newActivity = _objectSpread({}, activity, {\n        id: uuid() //5.066 - from the uuid npm\n\n      });\n\n      createActivity(newActivity);\n    } else {\n      editActivity(activity);\n    }\n  }; //5.065 - event: from onChange handler from our input\n\n\n  const handleInputChange = event => {\n    //console.log(event.target.value); //5.056 - every time the input changes you can see the characters display\n    const _event$currentTarget = event.currentTarget,\n          name = _event$currentTarget.name,\n          value = _event$currentTarget.value;\n    setActivity(_objectSpread({}, activity, {\n      [name]: value\n    }));\n  };\n\n  return React.createElement(Segment, {\n    clearing: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Form.Input, {\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Title\",\n    value: activity.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(Form.TextArea, {\n    onChange: handleInputChange,\n    name: \"description\",\n    rows: 2,\n    placeholder: \"Description\",\n    value: activity.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    onChange: handleInputChange,\n    name: \"category\",\n    placeholder: \"Category\",\n    value: activity.category,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    onChange: handleInputChange,\n    name: \"date\",\n    type: \"datetime-local\",\n    placeholder: \"Date\",\n    value: activity.date,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    onChange: handleInputChange,\n    name: \"city\",\n    placeholder: \"City\",\n    value: activity.city,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    onChange: handleInputChange,\n    name: \"venue\",\n    placeholder: \"Venue\",\n    value: activity.venue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(Button, {\n    loading: submitting,\n    floated: \"right\",\n    positive: true,\n    type: \"submit\",\n    content: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: cancelFormOpen,\n    floated: \"right\",\n    type: \"button\",\n    content: \"Cancel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })));\n};\n\nexport default observer(ActivityForm);","map":{"version":3,"sources":["F:/OneDrive/_SoftwareDev/Udemy/2019_.NetCore_React/Projects/Reactivities_.NetCore2.2.3/client-app/src/features/activities/form/ActivityForm.tsx"],"names":["React","useState","useContext","useEffect","Segment","Form","Button","v4","uuid","ActivityStore","observer","ActivityForm","match","activityStore","createActivity","editActivity","submitting","cancelFormOpen","initialFormState","activity","params","id","loadActivity","initializeForm","title","category","description","date","city","venue","setActivity","handleSubmit","length","newActivity","handleInputChange","event","currentTarget","name","value"],"mappings":"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","sourcesContent":["import React, { useState, FormEvent, useContext, useEffect } from \"react\";\r\nimport { Segment, Form, Button } from \"semantic-ui-react\";\r\nimport { IActivity } from \"./../../../app/models/activity\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match\r\n}) => {\r\n\r\n  const activityStore = useContext(ActivityStore);\r\n  const {\r\n    createActivity,\r\n    editActivity,\r\n    submitting,\r\n    cancelFormOpen,\r\n    activity: initialFormState\r\n  } = activityStore;\r\n\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      loadActivity(match.params.id);\r\n    }\r\n  });\r\n\r\n  const initializeForm = () => {\r\n    if (initialFormState) {\r\n      return initialFormState;\r\n    } else {\r\n      return {\r\n        id: \"\",\r\n        title: \"\",\r\n        category: \"\",\r\n        description: \"\",\r\n        date: \"\",\r\n        city: \"\",\r\n        venue: \"\"\r\n      };\r\n    }\r\n  };\r\n\r\n  const [activity, setActivity] = useState<IActivity>(initializeForm);\r\n\r\n  const handleSubmit = () => {\r\n    if (activity.id.length === 0) {\r\n      let newActivity = {\r\n        ...activity,\r\n        id: uuid() //5.066 - from the uuid npm\r\n      };\r\n      createActivity(newActivity);\r\n    } else {\r\n      editActivity(activity);\r\n    }\r\n  };\r\n\r\n  //5.065 - event: from onChange handler from our input\r\n  const handleInputChange = (\r\n    event: FormEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    //console.log(event.target.value); //5.056 - every time the input changes you can see the characters display\r\n    const { name, value } = event.currentTarget;\r\n    setActivity({ ...activity, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"title\"\r\n          placeholder=\"Title\"\r\n          value={activity.title}\r\n        />\r\n        <Form.TextArea\r\n          onChange={handleInputChange}\r\n          name=\"description\"\r\n          rows={2}\r\n          placeholder=\"Description\"\r\n          value={activity.description}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"category\"\r\n          placeholder=\"Category\"\r\n          value={activity.category}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"date\"\r\n          type=\"datetime-local\"\r\n          placeholder=\"Date\"\r\n          value={activity.date}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"city\"\r\n          placeholder=\"City\"\r\n          value={activity.city}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"venue\"\r\n          placeholder=\"Venue\"\r\n          value={activity.venue}\r\n        />\r\n        <Button\r\n          loading={submitting}\r\n          floated=\"right\"\r\n          positive\r\n          type=\"submit\"\r\n          content=\"Submit\"\r\n        />\r\n        <Button\r\n          onClick={cancelFormOpen}\r\n          floated=\"right\"\r\n          type=\"button\"\r\n          content=\"Cancel\"\r\n        />\r\n      </Form>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityForm);\r\n"]},"metadata":{},"sourceType":"module"}