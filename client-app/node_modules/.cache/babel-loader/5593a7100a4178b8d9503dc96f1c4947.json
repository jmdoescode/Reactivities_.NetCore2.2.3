{"ast":null,"code":"import _slicedToArray from \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\src\\\\app\\\\layout\\\\App.tsx\";\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport NavBar from \"./../../features/nav/NavBar\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\n\nconst App = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        activities = _useState2[0],\n        setActivities = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedActivity = _useState4[0],\n        setSelectedActivity = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        editMode = _useState6[0],\n        setEditMode = _useState6[1]; //smart enough to infer type by the initial value\n\n\n  const handleSelectActivity = id => {\n    setSelectedActivity(activities.filter(a => a.id === id)[0]);\n    setEditMode(false);\n  };\n\n  const handleOpenCreateForm = () => {\n    setSelectedActivity(null);\n    setEditMode(true);\n  };\n\n  const handleCreateActivity = activity => {\n    setActivities([...activities, activity]);\n    setSelectedActivity(activity);\n    setEditMode(false);\n  };\n\n  const handleEditActivity = activity => {\n    setActivities([...activities.filter(a => a.id !== activity.id), activity]);\n    setSelectedActivity(activity);\n    setEditMode(false);\n  }; //5.066 - filter out the activity bc you will add the new activity\n\n\n  useEffect(() => {\n    axios.get(\"http://localhost:5000/api/activities\").then(response => {\n      let activities = [];\n      response.data.forEach(activity => {\n        activity.date = activity.date.split('.')[0];\n        activities.push(activity);\n      });\n      setActivities(response.data);\n    });\n  }, []); //empty array ensures that useEffect will run 1 time only - every time this component renders the useEffect method will be called\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(NavBar, {\n    openCreateForm: handleOpenCreateForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(Container, {\n    style: {\n      marginTop: \"7em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(ActivityDashboard, {\n    activities: activities,\n    selectActivity: handleSelectActivity //selectedActivity={selectedActivity!} //use exclamation mark defines it as an activity or null (overrides the type safety)\n    ,\n    selectedActivity: selectedActivity //better to define union type as null in ActivityDashboard\n    ,\n    editMode: editMode,\n    setEditMode: setEditMode,\n    setSelectedActivity: setSelectedActivity,\n    createActivity: handleCreateActivity,\n    editActivity: handleEditActivity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["F:/OneDrive/_SoftwareDev/Udemy/2019_.NetCore_React/Projects/Reactivities_.NetCore2.2.3/client-app/src/app/layout/App.tsx"],"names":["React","useState","useEffect","Fragment","Container","axios","NavBar","ActivityDashboard","App","activities","setActivities","selectedActivity","setSelectedActivity","editMode","setEditMode","handleSelectActivity","id","filter","a","handleOpenCreateForm","handleCreateActivity","activity","handleEditActivity","get","then","response","data","forEach","date","split","push","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport NavBar from \"./../../features/nav/NavBar\";\r\nimport { IActivity } from \"./../models/activity\";\r\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\r\n\r\nconst App = () => {\r\n  const [activities, setActivities] = useState<IActivity[]>([]);\r\n  const [selectedActivity, setSelectedActivity] = useState<IActivity | null>(null);\r\n  const [editMode, setEditMode] = useState(false); //smart enough to infer type by the initial value\r\n\r\n  const handleSelectActivity = (id: string) => {\r\n    setSelectedActivity(activities.filter(a => a.id === id)[0]);\r\n    setEditMode(false);\r\n  };\r\n\r\n  const handleOpenCreateForm = () => {\r\n    setSelectedActivity(null);\r\n    setEditMode(true);\r\n  }\r\n\r\n  const handleCreateActivity = (activity: IActivity) => {\r\n    setActivities([...activities, activity]);\r\n    setSelectedActivity(activity);\r\n    setEditMode(false);\r\n  }\r\n\r\n  const handleEditActivity = (activity: IActivity) => {\r\n    setActivities([...activities.filter(a => a.id !== activity.id), activity])\r\n    setSelectedActivity(activity);\r\n    setEditMode(false);\r\n  } //5.066 - filter out the activity bc you will add the new activity\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get<IActivity[]>(\"http://localhost:5000/api/activities\")\r\n      .then(response => {\r\n        let activities = [];\r\n        response.data.forEach(activity => {\r\n          activity.date = activity.date.split('.')[0];\r\n          activities.push(activity);\r\n        })\r\n        setActivities(response.data);\r\n      });\r\n  }, []); //empty array ensures that useEffect will run 1 time only - every time this component renders the useEffect method will be called\r\n\r\n  return (\r\n    <Fragment>\r\n      <NavBar openCreateForm={handleOpenCreateForm} />\r\n      <Container style={{ marginTop: \"7em\" }}>\r\n        <ActivityDashboard\r\n          activities={activities}\r\n          selectActivity={handleSelectActivity}\r\n          //selectedActivity={selectedActivity!} //use exclamation mark defines it as an activity or null (overrides the type safety)\r\n          selectedActivity={selectedActivity} //better to define union type as null in ActivityDashboard\r\n          editMode={editMode}\r\n          setEditMode={setEditMode}\r\n          setSelectedActivity={setSelectedActivity}\r\n          createActivity={handleCreateActivity}\r\n          editActivity={handleEditActivity}\r\n        />\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}