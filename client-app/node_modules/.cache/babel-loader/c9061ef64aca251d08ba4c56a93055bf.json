{"ast":null,"code":"import _slicedToArray from \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\src\\\\app\\\\layout\\\\App.tsx\";\nimport React, { useState, useEffect, Fragment, useContext } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport NavBar from \"./../../features/nav/NavBar\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport LoadingComponent from './LoadingComponent';\nimport ActivityStore from './../stores/activityStore';\nimport { observer } from 'mobx-react-lite';\n\nconst App = () => {\n  const activityStore = useContext(ActivityStore);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        activities = _useState2[0],\n        setActivities = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedActivity = _useState4[0],\n        setSelectedActivity = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        editMode = _useState6[0],\n        setEditMode = _useState6[1]; //smart enough to infer type by the initial value\n\n\n  const _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        loading = _useState8[0],\n        setLoading = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        submitting = _useState10[0],\n        setSubmitting = _useState10[1];\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        target = _useState12[0],\n        setTarget = _useState12[1];\n\n  useEffect(() => {\n    activityStore.loadActivities();\n  }, [activityStore]); //5.054 - empty array ensures that useEffect will run 1 time only - every time this component renders the useEffect method will be called\n  //7.082 - in the same empty array in 5.054 - specify activity store\n\n  if (activityStore.loadingInitial) return React.createElement(LoadingComponent, {\n    content: \"Loading activities...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(NavBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(Container, {\n    style: {\n      marginTop: \"7em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(ActivityDashboard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })));\n};\n\nexport default observer(App); //7.082 - need to make App an observer of activites","map":{"version":3,"sources":["F:/OneDrive/_SoftwareDev/Udemy/2019_.NetCore_React/Projects/Reactivities_.NetCore2.2.3/client-app/src/app/layout/App.tsx"],"names":["React","useState","useEffect","Fragment","useContext","Container","NavBar","ActivityDashboard","LoadingComponent","ActivityStore","observer","App","activityStore","activities","setActivities","selectedActivity","setSelectedActivity","editMode","setEditMode","loading","setLoading","submitting","setSubmitting","target","setTarget","loadActivities","loadingInitial","marginTop"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,EAA+DC,UAA/D,QAAiF,OAAjF;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AAEA,OAAOC,iBAAP,MAA8B,uDAA9B;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,SAASC,QAAT,QAAyB,iBAAzB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAMC,aAAa,GAAGR,UAAU,CAACK,aAAD,CAAhC;;AADgB,oBAEoBR,QAAQ,CAAc,EAAd,CAF5B;AAAA;AAAA,QAETY,UAFS;AAAA,QAEGC,aAFH;;AAAA,qBAGgCb,QAAQ,CAAmB,IAAnB,CAHxC;AAAA;AAAA,QAGTc,gBAHS;AAAA,QAGSC,mBAHT;;AAAA,qBAIgBf,QAAQ,CAAC,KAAD,CAJxB;AAAA;AAAA,QAITgB,QAJS;AAAA,QAICC,WAJD,kBAIiC;;;AAJjC,qBAKcjB,QAAQ,CAAC,IAAD,CALtB;AAAA;AAAA,QAKTkB,OALS;AAAA,QAKAC,UALA;;AAAA,qBAMoBnB,QAAQ,CAAC,KAAD,CAN5B;AAAA;AAAA,QAMToB,UANS;AAAA,QAMGC,aANH;;AAAA,sBAOYrB,QAAQ,CAAC,EAAD,CAPpB;AAAA;AAAA,QAOTsB,MAPS;AAAA,QAODC,SAPC;;AAShBtB,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,aAAa,CAACa,cAAd;AACD,GAFQ,EAEN,CAACb,aAAD,CAFM,CAAT,CATgB,CAYd;AACA;;AAEF,MAAIA,aAAa,CAACc,cAAlB,EAAkC,OAAO,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAC,uBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAElC,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAQD,CAzBD;;AA2BA,eAAejB,QAAQ,CAACC,GAAD,CAAvB,C,CAA8B","sourcesContent":["import React, { useState, useEffect, Fragment, SyntheticEvent, useContext } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport NavBar from \"./../../features/nav/NavBar\";\r\nimport { IActivity } from \"./../models/activity\";\r\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\r\nimport agent from \"./../api/agent\";\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ActivityStore from './../stores/activityStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst App = () => {\r\n  const activityStore = useContext(ActivityStore);\r\n  const [activities, setActivities] = useState<IActivity[]>([]);\r\n  const [selectedActivity, setSelectedActivity] = useState<IActivity | null>(null);\r\n  const [editMode, setEditMode] = useState(false); //smart enough to infer type by the initial value\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [target, setTarget] = useState('');\r\n\r\n  useEffect(() => {\r\n    activityStore.loadActivities();\r\n  }, [activityStore]);\r\n    //5.054 - empty array ensures that useEffect will run 1 time only - every time this component renders the useEffect method will be called\r\n    //7.082 - in the same empty array in 5.054 - specify activity store\r\n\r\n  if (activityStore.loadingInitial) return <LoadingComponent content='Loading activities...' />\r\n\r\n  return (\r\n    <Fragment>\r\n      <NavBar />\r\n      <Container style={{ marginTop: \"7em\" }}>\r\n        <ActivityDashboard />\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(App); //7.082 - need to make App an observer of activites\r\n"]},"metadata":{},"sourceType":"module"}