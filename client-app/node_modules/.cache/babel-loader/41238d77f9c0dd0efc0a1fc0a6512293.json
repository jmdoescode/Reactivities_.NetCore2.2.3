{"ast":null,"code":"import _slicedToArray from \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\OneDrive\\\\_SoftwareDev\\\\Udemy\\\\2019_.NetCore_React\\\\Projects\\\\Reactivities_.NetCore2.2.3\\\\client-app\\\\src\\\\app\\\\layout\\\\App.tsx\";\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport NavBar from \"./../../features/nav/NavBar\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport agent from \"./../api/agent\";\nimport LoadingComponent from './LoadingComponent';\n\nconst App = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        activities = _useState2[0],\n        setActivities = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedActivity = _useState4[0],\n        setSelectedActivity = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        editMode = _useState6[0],\n        setEditMode = _useState6[1]; //smart enough to infer type by the initial value\n\n\n  const _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        loading = _useState8[0],\n        setLoading = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        submitting = _useState10[0],\n        setSubmitting = _useState10[1];\n\n  const handleSelectActivity = id => {\n    setSelectedActivity(activities.filter(a => a.id === id)[0]);\n    setEditMode(false);\n  };\n\n  const handleOpenCreateForm = () => {\n    setSelectedActivity(null);\n    setEditMode(true);\n  };\n\n  const handleCreateActivity = activity => {\n    setSubmitting(true);\n    agent.Activities.create(activity).then(() => {\n      setActivities([...activities, activity]);\n      setSelectedActivity(activity);\n      setEditMode(false);\n    }).then(() => setSubmitting(false));\n  };\n\n  const handleEditActivity = activity => {\n    setSubmitting(true);\n    agent.Activities.update(activity).then(() => {\n      setActivities([...activities.filter(a => a.id !== activity.id), activity]);\n      setSelectedActivity(activity);\n      setEditMode(false);\n    }).then(() => setSubmitting(false));\n  }; //5.066 - filter out the activity bc you will add the new activity\n\n\n  const handleDeleteActivity = id => {\n    setSubmitting(true);\n    agent.Activities.delete(id).then(() => {\n      setActivities([...activities.filter(a => a.id !== id)]);\n    }).then(() => setSubmitting(false));\n  };\n\n  useEffect(() => {\n    agent.Activities.list().then(response => {\n      let activities = [];\n      response.forEach(activity => {\n        activity.date = activity.date.split('.')[0];\n        activities.push(activity);\n      });\n      setActivities(activities);\n    }).then(() => setLoading(false));\n  }, []); //empty array ensures that useEffect will run 1 time only - every time this component renders the useEffect method will be called\n\n  if (loading) return React.createElement(LoadingComponent, {\n    content: \"Loading activities...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(NavBar, {\n    openCreateForm: handleOpenCreateForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Container, {\n    style: {\n      marginTop: \"7em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(ActivityDashboard, {\n    activities: activities,\n    selectActivity: handleSelectActivity //selectedActivity={selectedActivity!} //use exclamation mark defines it as an activity or null (overrides the type safety)\n    ,\n    selectedActivity: selectedActivity //better to define union type as null in ActivityDashboard\n    ,\n    editMode: editMode,\n    setEditMode: setEditMode,\n    setSelectedActivity: setSelectedActivity,\n    createActivity: handleCreateActivity,\n    editActivity: handleEditActivity,\n    deleteActivity: handleDeleteActivity,\n    submitting: submitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["F:/OneDrive/_SoftwareDev/Udemy/2019_.NetCore_React/Projects/Reactivities_.NetCore2.2.3/client-app/src/app/layout/App.tsx"],"names":["React","useState","useEffect","Fragment","Container","NavBar","ActivityDashboard","agent","LoadingComponent","App","activities","setActivities","selectedActivity","setSelectedActivity","editMode","setEditMode","loading","setLoading","submitting","setSubmitting","handleSelectActivity","id","filter","a","handleOpenCreateForm","handleCreateActivity","activity","Activities","create","then","handleEditActivity","update","handleDeleteActivity","delete","list","response","forEach","date","split","push","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport NavBar from \"./../../features/nav/NavBar\";\r\nimport { IActivity } from \"./../models/activity\";\r\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\r\nimport agent from \"./../api/agent\";\r\nimport LoadingComponent from './LoadingComponent';\r\n\r\nconst App = () => {\r\n  const [activities, setActivities] = useState<IActivity[]>([]);\r\n  const [selectedActivity, setSelectedActivity] = useState<IActivity | null>(null);\r\n  const [editMode, setEditMode] = useState(false); //smart enough to infer type by the initial value\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const handleSelectActivity = (id: string) => {\r\n    setSelectedActivity(activities.filter(a => a.id === id)[0]);\r\n    setEditMode(false);\r\n  };\r\n\r\n  const handleOpenCreateForm = () => {\r\n    setSelectedActivity(null);\r\n    setEditMode(true);\r\n  }\r\n\r\n  const handleCreateActivity = (activity: IActivity) => {\r\n    setSubmitting(true);\r\n    agent.Activities.create(activity).then(() => {\r\n      setActivities([...activities, activity]);\r\n      setSelectedActivity(activity);\r\n      setEditMode(false);\r\n    })\r\n    .then(() => setSubmitting(false));\r\n  }\r\n\r\n  const handleEditActivity = (activity: IActivity) => {\r\n    setSubmitting(true);\r\n    agent.Activities.update(activity).then(() => {\r\n      setActivities([...activities.filter(a => a.id !== activity.id), activity])\r\n      setSelectedActivity(activity);\r\n      setEditMode(false);\r\n    })\r\n    .then(() => setSubmitting(false));\r\n  } //5.066 - filter out the activity bc you will add the new activity\r\n\r\n  const handleDeleteActivity = (id: string) => {\r\n    setSubmitting(true);\r\n    agent.Activities.delete(id).then(() => {\r\n      setActivities([...activities.filter(a => a.id !== id)]);\r\n    })\r\n    .then(() => setSubmitting(false));\r\n  }\r\n\r\n  useEffect(() => {\r\n    agent.Activities.list()\r\n      .then(response => {\r\n        let activities: IActivity[] = [];\r\n        response.forEach((activity) => {\r\n          activity.date = activity.date.split('.')[0];\r\n          activities.push(activity);\r\n        });\r\n        setActivities(activities);\r\n      })\r\n      .then(() => setLoading(false));\r\n  }, []); //empty array ensures that useEffect will run 1 time only - every time this component renders the useEffect method will be called\r\n\r\n  if (loading) return <LoadingComponent content='Loading activities...' />\r\n\r\n  return (\r\n    <Fragment>\r\n      <NavBar openCreateForm={handleOpenCreateForm} />\r\n      <Container style={{ marginTop: \"7em\" }}>\r\n        <ActivityDashboard\r\n          activities={activities}\r\n          selectActivity={handleSelectActivity}\r\n          //selectedActivity={selectedActivity!} //use exclamation mark defines it as an activity or null (overrides the type safety)\r\n          selectedActivity={selectedActivity} //better to define union type as null in ActivityDashboard\r\n          editMode={editMode}\r\n          setEditMode={setEditMode}\r\n          setSelectedActivity={setSelectedActivity}\r\n          createActivity={handleCreateActivity}\r\n          editActivity={handleEditActivity}\r\n          deleteActivity={handleDeleteActivity}\r\n          submitting={submitting}\r\n        />\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}